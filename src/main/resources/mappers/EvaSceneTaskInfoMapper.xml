<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dmx.evaluationplatform.model.dao.EvaSceneTaskInfoMapper">
  <resultMap id="BaseResultMap" type="com.dmx.evaluationplatform.model.pojo.EvaSceneTaskInfo">
    <id column="scene_task_id" jdbcType="BIGINT" property="sceneTaskId" />
    <result column="scene_id" jdbcType="BIGINT" property="sceneId" />
    <result column="eva_data_id" jdbcType="BIGINT" property="evaDataId" />
    <result column="metric_package_id" jdbcType="BIGINT" property="metricPackageId" />
    <result column="result_id" jdbcType="CHAR" property="resultId" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="status_description" jdbcType="VARCHAR" property="statusDescription" />
    <result column="start_time" jdbcType="TIMESTAMP" property="startTime" />
    <result column="end_time" jdbcType="TIMESTAMP" property="endTime" />
    <result column="label" jdbcType="VARCHAR" property="label" />
    <result column="QPS" jdbcType="INTEGER" property="qps" />
    <result column="host_a" jdbcType="VARCHAR" property="hostA" />
    <result column="host_b" jdbcType="VARCHAR" property="hostB" />
    <result column="count" jdbcType="INTEGER" property="count" />
    <result column="execute_by" jdbcType="VARCHAR" property="executeBy" />
    <result column="task_type" jdbcType="INTEGER" property="taskType" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    scene_task_id, scene_id, eva_data_id, metric_package_id, result_id, `status`, status_description, 
    start_time, end_time, `label`, QPS, host_a, host_b, `count`, execute_by, task_type, 
    create_by, create_time, update_by, update_time
  </sql>
  <select id="selectByExample" parameterType="com.dmx.evaluationplatform.model.pojo.EvaSceneTaskInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from eva_scene_task_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from eva_scene_task_info
    where scene_task_id = #{sceneTaskId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from eva_scene_task_info
    where scene_task_id = #{sceneTaskId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.dmx.evaluationplatform.model.pojo.EvaSceneTaskInfoExample">
    delete from eva_scene_task_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.dmx.evaluationplatform.model.pojo.EvaSceneTaskInfo">
    insert into eva_scene_task_info (scene_task_id, scene_id, eva_data_id, 
      metric_package_id, result_id, `status`, 
      status_description, start_time, end_time, 
      `label`, QPS, host_a, 
      host_b, `count`, execute_by, 
      task_type, create_by, create_time, 
      update_by, update_time)
    values (#{sceneTaskId,jdbcType=BIGINT}, #{sceneId,jdbcType=BIGINT}, #{evaDataId,jdbcType=BIGINT}, 
      #{metricPackageId,jdbcType=BIGINT}, #{resultId,jdbcType=CHAR}, #{status,jdbcType=INTEGER}, 
      #{statusDescription,jdbcType=VARCHAR}, #{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, 
      #{label,jdbcType=VARCHAR}, #{qps,jdbcType=INTEGER}, #{hostA,jdbcType=VARCHAR}, 
      #{hostB,jdbcType=VARCHAR}, #{count,jdbcType=INTEGER}, #{executeBy,jdbcType=VARCHAR}, 
      #{taskType,jdbcType=INTEGER}, #{createBy,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.dmx.evaluationplatform.model.pojo.EvaSceneTaskInfo">
    insert into eva_scene_task_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="sceneTaskId != null">
        scene_task_id,
      </if>
      <if test="sceneId != null">
        scene_id,
      </if>
      <if test="evaDataId != null">
        eva_data_id,
      </if>
      <if test="metricPackageId != null">
        metric_package_id,
      </if>
      <if test="resultId != null">
        result_id,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="statusDescription != null">
        status_description,
      </if>
      <if test="startTime != null">
        start_time,
      </if>
      <if test="endTime != null">
        end_time,
      </if>
      <if test="label != null">
        `label`,
      </if>
      <if test="qps != null">
        QPS,
      </if>
      <if test="hostA != null">
        host_a,
      </if>
      <if test="hostB != null">
        host_b,
      </if>
      <if test="count != null">
        `count`,
      </if>
      <if test="executeBy != null">
        execute_by,
      </if>
      <if test="taskType != null">
        task_type,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="sceneTaskId != null">
        #{sceneTaskId,jdbcType=BIGINT},
      </if>
      <if test="sceneId != null">
        #{sceneId,jdbcType=BIGINT},
      </if>
      <if test="evaDataId != null">
        #{evaDataId,jdbcType=BIGINT},
      </if>
      <if test="metricPackageId != null">
        #{metricPackageId,jdbcType=BIGINT},
      </if>
      <if test="resultId != null">
        #{resultId,jdbcType=CHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="statusDescription != null">
        #{statusDescription,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null">
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="label != null">
        #{label,jdbcType=VARCHAR},
      </if>
      <if test="qps != null">
        #{qps,jdbcType=INTEGER},
      </if>
      <if test="hostA != null">
        #{hostA,jdbcType=VARCHAR},
      </if>
      <if test="hostB != null">
        #{hostB,jdbcType=VARCHAR},
      </if>
      <if test="count != null">
        #{count,jdbcType=INTEGER},
      </if>
      <if test="executeBy != null">
        #{executeBy,jdbcType=VARCHAR},
      </if>
      <if test="taskType != null">
        #{taskType,jdbcType=INTEGER},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.dmx.evaluationplatform.model.pojo.EvaSceneTaskInfoExample" resultType="java.lang.Long">
    select count(*) from eva_scene_task_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update eva_scene_task_info
    <set>
      <if test="record.sceneTaskId != null">
        scene_task_id = #{record.sceneTaskId,jdbcType=BIGINT},
      </if>
      <if test="record.sceneId != null">
        scene_id = #{record.sceneId,jdbcType=BIGINT},
      </if>
      <if test="record.evaDataId != null">
        eva_data_id = #{record.evaDataId,jdbcType=BIGINT},
      </if>
      <if test="record.metricPackageId != null">
        metric_package_id = #{record.metricPackageId,jdbcType=BIGINT},
      </if>
      <if test="record.resultId != null">
        result_id = #{record.resultId,jdbcType=CHAR},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.statusDescription != null">
        status_description = #{record.statusDescription,jdbcType=VARCHAR},
      </if>
      <if test="record.startTime != null">
        start_time = #{record.startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endTime != null">
        end_time = #{record.endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.label != null">
        `label` = #{record.label,jdbcType=VARCHAR},
      </if>
      <if test="record.qps != null">
        QPS = #{record.qps,jdbcType=INTEGER},
      </if>
      <if test="record.hostA != null">
        host_a = #{record.hostA,jdbcType=VARCHAR},
      </if>
      <if test="record.hostB != null">
        host_b = #{record.hostB,jdbcType=VARCHAR},
      </if>
      <if test="record.count != null">
        `count` = #{record.count,jdbcType=INTEGER},
      </if>
      <if test="record.executeBy != null">
        execute_by = #{record.executeBy,jdbcType=VARCHAR},
      </if>
      <if test="record.taskType != null">
        task_type = #{record.taskType,jdbcType=INTEGER},
      </if>
      <if test="record.createBy != null">
        create_by = #{record.createBy,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateBy != null">
        update_by = #{record.updateBy,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update eva_scene_task_info
    set scene_task_id = #{record.sceneTaskId,jdbcType=BIGINT},
      scene_id = #{record.sceneId,jdbcType=BIGINT},
      eva_data_id = #{record.evaDataId,jdbcType=BIGINT},
      metric_package_id = #{record.metricPackageId,jdbcType=BIGINT},
      result_id = #{record.resultId,jdbcType=CHAR},
      `status` = #{record.status,jdbcType=INTEGER},
      status_description = #{record.statusDescription,jdbcType=VARCHAR},
      start_time = #{record.startTime,jdbcType=TIMESTAMP},
      end_time = #{record.endTime,jdbcType=TIMESTAMP},
      `label` = #{record.label,jdbcType=VARCHAR},
      QPS = #{record.qps,jdbcType=INTEGER},
      host_a = #{record.hostA,jdbcType=VARCHAR},
      host_b = #{record.hostB,jdbcType=VARCHAR},
      `count` = #{record.count,jdbcType=INTEGER},
      execute_by = #{record.executeBy,jdbcType=VARCHAR},
      task_type = #{record.taskType,jdbcType=INTEGER},
      create_by = #{record.createBy,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_by = #{record.updateBy,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.dmx.evaluationplatform.model.pojo.EvaSceneTaskInfo">
    update eva_scene_task_info
    <set>
      <if test="sceneId != null">
        scene_id = #{sceneId,jdbcType=BIGINT},
      </if>
      <if test="evaDataId != null">
        eva_data_id = #{evaDataId,jdbcType=BIGINT},
      </if>
      <if test="metricPackageId != null">
        metric_package_id = #{metricPackageId,jdbcType=BIGINT},
      </if>
      <if test="resultId != null">
        result_id = #{resultId,jdbcType=CHAR},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=INTEGER},
      </if>
      <if test="statusDescription != null">
        status_description = #{statusDescription,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null">
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="label != null">
        `label` = #{label,jdbcType=VARCHAR},
      </if>
      <if test="qps != null">
        QPS = #{qps,jdbcType=INTEGER},
      </if>
      <if test="hostA != null">
        host_a = #{hostA,jdbcType=VARCHAR},
      </if>
      <if test="hostB != null">
        host_b = #{hostB,jdbcType=VARCHAR},
      </if>
      <if test="count != null">
        `count` = #{count,jdbcType=INTEGER},
      </if>
      <if test="executeBy != null">
        execute_by = #{executeBy,jdbcType=VARCHAR},
      </if>
      <if test="taskType != null">
        task_type = #{taskType,jdbcType=INTEGER},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where scene_task_id = #{sceneTaskId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.dmx.evaluationplatform.model.pojo.EvaSceneTaskInfo">
    update eva_scene_task_info
    set scene_id = #{sceneId,jdbcType=BIGINT},
      eva_data_id = #{evaDataId,jdbcType=BIGINT},
      metric_package_id = #{metricPackageId,jdbcType=BIGINT},
      result_id = #{resultId,jdbcType=CHAR},
      `status` = #{status,jdbcType=INTEGER},
      status_description = #{statusDescription,jdbcType=VARCHAR},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      `label` = #{label,jdbcType=VARCHAR},
      QPS = #{qps,jdbcType=INTEGER},
      host_a = #{hostA,jdbcType=VARCHAR},
      host_b = #{hostB,jdbcType=VARCHAR},
      `count` = #{count,jdbcType=INTEGER},
      execute_by = #{executeBy,jdbcType=VARCHAR},
      task_type = #{taskType,jdbcType=INTEGER},
      create_by = #{createBy,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where scene_task_id = #{sceneTaskId,jdbcType=BIGINT}
  </update>
  <resultMap id="BaseResultMap" type="com.dmx.evaluationplatform.model.pojo.EvaSceneTaskInfo">
    <id column="scene_task_id" jdbcType="BIGINT" property="sceneTaskId" />
    <result column="scene_id" jdbcType="BIGINT" property="sceneId" />
    <result column="eva_data_id" jdbcType="BIGINT" property="evaDataId" />
    <result column="metric_package_id" jdbcType="BIGINT" property="metricPackageId" />
    <result column="result_id" jdbcType="CHAR" property="resultId" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="status_description" jdbcType="VARCHAR" property="statusDescription" />
    <result column="start_time" jdbcType="TIMESTAMP" property="startTime" />
    <result column="end_time" jdbcType="TIMESTAMP" property="endTime" />
    <result column="label" jdbcType="VARCHAR" property="label" />
    <result column="QPS" jdbcType="INTEGER" property="qps" />
    <result column="host_a" jdbcType="VARCHAR" property="hostA" />
    <result column="host_b" jdbcType="VARCHAR" property="hostB" />
    <result column="count" jdbcType="INTEGER" property="count" />
    <result column="execute_by" jdbcType="VARCHAR" property="executeBy" />
    <result column="task_type" jdbcType="INTEGER" property="taskType" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    scene_task_id, scene_id, eva_data_id, metric_package_id, result_id, `status`, status_description, 
    start_time, end_time, `label`, QPS, host_a, host_b, `count`, execute_by, task_type, 
    create_by, create_time, update_by, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from eva_scene_task_info
    where scene_task_id = #{sceneTaskId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from eva_scene_task_info
    where scene_task_id = #{sceneTaskId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.dmx.evaluationplatform.model.pojo.EvaSceneTaskInfo">
    insert into eva_scene_task_info (scene_task_id, scene_id, eva_data_id, 
      metric_package_id, result_id, `status`, 
      status_description, start_time, end_time, 
      `label`, QPS, host_a, 
      host_b, `count`, execute_by, 
      task_type, create_by, create_time, 
      update_by, update_time)
    values (#{sceneTaskId,jdbcType=BIGINT}, #{sceneId,jdbcType=BIGINT}, #{evaDataId,jdbcType=BIGINT}, 
      #{metricPackageId,jdbcType=BIGINT}, #{resultId,jdbcType=CHAR}, #{status,jdbcType=INTEGER}, 
      #{statusDescription,jdbcType=VARCHAR}, #{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, 
      #{label,jdbcType=VARCHAR}, #{qps,jdbcType=INTEGER}, #{hostA,jdbcType=VARCHAR}, 
      #{hostB,jdbcType=VARCHAR}, #{count,jdbcType=INTEGER}, #{executeBy,jdbcType=VARCHAR}, 
      #{taskType,jdbcType=INTEGER}, #{createBy,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.dmx.evaluationplatform.model.pojo.EvaSceneTaskInfo">
    insert into eva_scene_task_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="sceneTaskId != null">
        scene_task_id,
      </if>
      <if test="sceneId != null">
        scene_id,
      </if>
      <if test="evaDataId != null">
        eva_data_id,
      </if>
      <if test="metricPackageId != null">
        metric_package_id,
      </if>
      <if test="resultId != null">
        result_id,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="statusDescription != null">
        status_description,
      </if>
      <if test="startTime != null">
        start_time,
      </if>
      <if test="endTime != null">
        end_time,
      </if>
      <if test="label != null">
        `label`,
      </if>
      <if test="qps != null">
        QPS,
      </if>
      <if test="hostA != null">
        host_a,
      </if>
      <if test="hostB != null">
        host_b,
      </if>
      <if test="count != null">
        `count`,
      </if>
      <if test="executeBy != null">
        execute_by,
      </if>
      <if test="taskType != null">
        task_type,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="sceneTaskId != null">
        #{sceneTaskId,jdbcType=BIGINT},
      </if>
      <if test="sceneId != null">
        #{sceneId,jdbcType=BIGINT},
      </if>
      <if test="evaDataId != null">
        #{evaDataId,jdbcType=BIGINT},
      </if>
      <if test="metricPackageId != null">
        #{metricPackageId,jdbcType=BIGINT},
      </if>
      <if test="resultId != null">
        #{resultId,jdbcType=CHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="statusDescription != null">
        #{statusDescription,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null">
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="label != null">
        #{label,jdbcType=VARCHAR},
      </if>
      <if test="qps != null">
        #{qps,jdbcType=INTEGER},
      </if>
      <if test="hostA != null">
        #{hostA,jdbcType=VARCHAR},
      </if>
      <if test="hostB != null">
        #{hostB,jdbcType=VARCHAR},
      </if>
      <if test="count != null">
        #{count,jdbcType=INTEGER},
      </if>
      <if test="executeBy != null">
        #{executeBy,jdbcType=VARCHAR},
      </if>
      <if test="taskType != null">
        #{taskType,jdbcType=INTEGER},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.dmx.evaluationplatform.model.pojo.EvaSceneTaskInfo">
    update eva_scene_task_info
    <set>
      <if test="sceneId != null">
        scene_id = #{sceneId,jdbcType=BIGINT},
      </if>
      <if test="evaDataId != null">
        eva_data_id = #{evaDataId,jdbcType=BIGINT},
      </if>
      <if test="metricPackageId != null">
        metric_package_id = #{metricPackageId,jdbcType=BIGINT},
      </if>
      <if test="resultId != null">
        result_id = #{resultId,jdbcType=CHAR},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=INTEGER},
      </if>
      <if test="statusDescription != null">
        status_description = #{statusDescription,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null">
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="label != null">
        `label` = #{label,jdbcType=VARCHAR},
      </if>
      <if test="qps != null">
        QPS = #{qps,jdbcType=INTEGER},
      </if>
      <if test="hostA != null">
        host_a = #{hostA,jdbcType=VARCHAR},
      </if>
      <if test="hostB != null">
        host_b = #{hostB,jdbcType=VARCHAR},
      </if>
      <if test="count != null">
        `count` = #{count,jdbcType=INTEGER},
      </if>
      <if test="executeBy != null">
        execute_by = #{executeBy,jdbcType=VARCHAR},
      </if>
      <if test="taskType != null">
        task_type = #{taskType,jdbcType=INTEGER},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where scene_task_id = #{sceneTaskId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.dmx.evaluationplatform.model.pojo.EvaSceneTaskInfo">
    update eva_scene_task_info
    set scene_id = #{sceneId,jdbcType=BIGINT},
      eva_data_id = #{evaDataId,jdbcType=BIGINT},
      metric_package_id = #{metricPackageId,jdbcType=BIGINT},
      result_id = #{resultId,jdbcType=CHAR},
      `status` = #{status,jdbcType=INTEGER},
      status_description = #{statusDescription,jdbcType=VARCHAR},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      `label` = #{label,jdbcType=VARCHAR},
      QPS = #{qps,jdbcType=INTEGER},
      host_a = #{hostA,jdbcType=VARCHAR},
      host_b = #{hostB,jdbcType=VARCHAR},
      `count` = #{count,jdbcType=INTEGER},
      execute_by = #{executeBy,jdbcType=VARCHAR},
      task_type = #{taskType,jdbcType=INTEGER},
      create_by = #{createBy,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where scene_task_id = #{sceneTaskId,jdbcType=BIGINT}
  </update>
</mapper>